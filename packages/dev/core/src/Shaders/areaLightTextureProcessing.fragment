uniform vec2 texelSize; // The size of a single texel (1 / texture resolution)

uniform sampler2D textureSampler;

varying vec2 vUV;

#include<helperFunctions>

void main(void) 
{
    // Define Gaussian weights (simple 1D kernel example)
    float weights[5] = float[](0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

    vec4 color = texture2D(textureSampler, vUV) * weights[0];
#ifdef GAUSSIAN_VERTICAL
    for (int i = 1; i < 5; i++) {
        color += texture(inputTexture, TexCoords + vec2(0.0, texelSize.y * i)) * weights[i];
        color += texture(inputTexture, TexCoords - vec2(0.0, texelSize.y * i)) * weights[i];
    }
#else
    // Perform horizontal Gaussian blur
    for (int i = 1; i < 5; i++) {
        color += texture(inputTexture, TexCoords + vec2(texelSize.x * i, 0.0)) * weights[i];
        color += texture(inputTexture, TexCoords - vec2(texelSize.x * i, 0.0)) * weights[i];
    }
#endif
    gl_FragColor = color;
}
