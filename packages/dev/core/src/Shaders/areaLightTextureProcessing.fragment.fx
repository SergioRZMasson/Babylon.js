uniform vec2 textureResolution;
uniform sampler2D textureSampler;
uniform vec2 blurDirection;
uniform vec2 rangeFilter;
uniform vec2 scalingRange;

varying vec2 vUV;



vec4 blur5(vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3333333333333333) * direction;
  color += texture2D(textureSampler, uv) * 0.29411764705882354;
  color += texture2D(textureSampler, uv + (off1 / resolution)) * 0.35294117647058826;
  color += texture2D(textureSampler, uv - (off1 / resolution)) * 0.35294117647058826;
  return color; 
}

vec4 blur9(vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3846153846) * direction;
  vec2 off2 = vec2(3.2307692308) * direction;
  color += texture2D(textureSampler, uv) * 0.2270270270;
  color += texture2D(textureSampler, uv + (off1 / resolution)) * 0.3162162162;
  color += texture2D(textureSampler, uv - (off1 / resolution)) * 0.3162162162;
  color += texture2D(textureSampler, uv + (off2 / resolution)) * 0.0702702703;
  color += texture2D(textureSampler, uv - (off2 / resolution)) * 0.0702702703;
  return color;
}

vec4 blur13(vec2 uv, vec2 resolution, vec2 direction) {
    vec4 color = vec4(0.0);
    vec2 off1 = vec2(1.411764705882353) * direction;
    vec2 off2 = vec2(3.2941176470588234) * direction;
    vec2 off3 = vec2(5.176470588235294) * direction;
    color += texture2D(textureSampler, uv) * 0.1964825501511404;
    color += texture2D(textureSampler, uv + (off1 / resolution)) * 0.2969069646728344;
    color += texture2D(textureSampler, uv - (off1 / resolution)) * 0.2969069646728344;
    color += texture2D(textureSampler, uv + (off2 / resolution)) * 0.09447039785044732;
    color += texture2D(textureSampler, uv - (off2 / resolution)) * 0.09447039785044732;
    color += texture2D(textureSampler, uv + (off3 / resolution)) * 0.010381362401148057;
    color += texture2D(textureSampler, uv - (off3 / resolution)) * 0.010381362401148057;
    return color;
}

vec4 blur100(vec2 uv, vec2 resolution, vec2 direction) {
    const float weights[251] = float[](
	3.054936363e-151,
	1.527468182e-148,
	3.811033113e-146,
	6.326314968e-144,
	7.860446348e-142,
	7.797562777e-140,
	6.432989291e-138,
	4.539852443e-136,
	2.797684068e-134,
	1.529400624e-132,
	7.509357063e-131,
	3.345077237e-129,
	1.363118974e-127,
	5.116938918e-126,
	1.779963752e-124,
	5.767082557e-123,
	1.748146900e-121,
	4.977077057e-120,
	1.335515677e-118,
	3.387992401e-117,
	8.148121726e-116,
	1.862427823e-114,
	4.055013305e-113,
	8.427375478e-112,
	1.674940876e-110,
	3.189087429e-109,
	5.826217417e-108,
	1.022824836e-106,
	1.727843383e-105,
	2.812214058e-104,
	4.415176070e-103,
	6.693976623e-102,
	9.810859488e-101,
	1.391358255e-99,
	1.911071485e-98,
	2.544455177e-97,
	3.286587937e-96,
	4.121558927e-95,
	5.021794166e-94,
	5.948894627e-93,
	6.856101058e-92,
	7.692210943e-91,
	8.406487674e-90,
	8.953886871e-89,
	9.299832500e-88,
	9.423830267e-87,
	9.321397329e-86,
	9.004073165e-85,
	8.497594049e-84,
	7.838596960e-83,
	7.070414458e-82,
	6.238600992e-81,
	5.386792010e-80,
	4.553363813e-79,
	3.769173378e-78,
	3.056456958e-77,
	2.428791690e-76,
	1.891900895e-75,
	1.445020856e-74,
	1.082541048e-73,
	7.956676703e-73,
	5.739242212e-72,
	4.063753760e-71,
	2.825276424e-70,
	1.929134058e-69,
	1.294003768e-68,
	8.528661199e-68,
	5.524535762e-67,
	3.517829389e-66,
	2.202467096e-65,
	1.356090455e-64,
	8.212942191e-64,
	4.893544722e-63,
	2.869091974e-62,
	1.655543612e-61,
	9.403487717e-61,
	5.258529315e-60,
	2.895605753e-59,
	1.570309274e-58,
	8.388234348e-58,
	4.414308326e-57,
	2.288900613e-56,
	1.169572387e-55,
	5.890135633e-55,
	2.924031618e-54,
	1.431055474e-53,
	6.905674672e-53,
	3.286148637e-52,
	1.542249304e-51,
	7.139401270e-51,
	3.260326580e-50,
	1.468938349e-49,
	6.530388966e-49,
	2.864944837e-48,
	1.240460158e-47,
	5.301334991e-47,
	2.236500699e-46,
	9.314910129e-46,
	3.830519165e-45,
	1.555422934e-44,
	6.237245965e-44,
	2.470196422e-43,
	9.662827179e-43,
	3.733791473e-42,
	1.425303091e-41,
	5.375428801e-41,
	2.003107902e-40,
	7.375930032e-40,
	2.684018984e-39,
	9.652618731e-39,
	3.431067204e-38,
	1.205510099e-37,
	4.186994896e-37,
	1.437658424e-36,
	4.880472020e-36,
	1.638141043e-35,
	5.436933635e-35,
	1.784429501e-34,
	5.791834735e-34,
	1.859227621e-33,
	5.903047696e-33,
	1.853849690e-32,
	5.759090429e-32,
	1.769866815e-31,
	5.380966042e-31,
	1.618594585e-30,
	4.817245790e-30,
	1.418621989e-29,
	4.133953138e-29,
	1.192116719e-28,
	3.402117713e-28,
	9.609034763e-28,
	2.686161991e-27,
	7.432388064e-27,
	2.035586880e-26,
	5.518702209e-26,
	1.481122284e-25,
	3.935244609e-25,
	1.035140430e-24,
	2.695833349e-24,
	6.951398850e-24,
	1.774825238e-23,
	4.487058173e-23,
	1.123333445e-22,
	2.784930832e-22,
	6.837485352e-22,
	1.662539247e-21,
	4.003665941e-21,
	9.549284305e-21,
	2.255938306e-20,
	5.278895635e-20,
	1.223585081e-19,
	2.809415745e-19,
	6.390043656e-19,
	1.439834512e-18,
	3.214082201e-18,
	7.108066406e-18,
	1.557436206e-17,
	3.381016574e-17,
	7.272375273e-17,
	1.549924980e-16,
	3.273133498e-16,
	6.849334913e-16,
	1.420291534e-15,
	2.918525896e-15,
	5.943180007e-15,
	1.199376688e-14,
	2.398753376e-14,
	4.754671871e-14,
	9.340538823e-14,
	1.818657853e-13,
	3.509690594e-13,
	6.713303520e-13,
	1.272811303e-12,
	2.392007449e-12,
	4.455968162e-12,
	8.228350299e-12,
	1.506206495e-11,
	2.733172461e-11,
	4.916656606e-11,
	8.768037613e-11,
	1.550150296e-10,
	2.717021673e-10,
	4.721381924e-10,
	8.134119945e-10,
	1.389395623e-9,
	2.353008716e-9,
	3.951041374e-9,
	6.578063564e-9,
	1.085902557e-8,
	1.777451027e-8,
	2.884868159e-8,
	4.642834693e-8,
	7.409290599e-8,
	1.172501141e-7,
	1.839924868e-7,
	2.863148391e-7,
	4.418259446e-7,
	6.761275819e-7,
	0.000001026083064,
	0.000001544255011,
	0.000002304858226,
	0.000003411646582,
	0.000005008229957,
	0.000007291393614,
	0.00001052806102,
	0.00001507659224,
	0.00002141313101,
	0.00003016368936,
	0.00004214257078,
	0.00005839756236,
	0.00008026205253,
	0.0001094138358,
	0.0001479398343,
	0.0001984052918,
	0.0002639251788,
	0.0003482346109,
	0.0004557540530,
	0.0005916440229,
	0.0007618429884,
	0.0009730812716,
	0.001232863150,
	0.001549409093,
	0.001931550350,
	0.002388568959,
	0.002929977923,
	0.003565238623,
	0.004303415783,
	0.005152774161,
	0.006120325641,
	0.007211340212,
	0.008428839209,
	0.009773093738,
	0.01124115503,
	0.01282644612,
	0.01451844540,
	0.01630249166,
	0.01815973754,
	0.02006727300,
	0.02199843316,
	0.02392329606,
	0.02580936504,
	0.02762241961,
	0.02932750724,
	0.03089003837,
	0.03227693805,
	0.03345780164,
	0.03440599845,
	0.03509966777,
	0.03552255533,
	0.03566464555);

    vec4 color =  texture(textureSampler,  uv) * weights[250];
    for (int i = 1; i < 250; i++) {
        vec2 offset = vec2(i) * direction;
        color += texture(textureSampler,  uv + (offset / resolution)) * weights[250 - i];
        color += texture(textureSampler,  uv - (offset / resolution)) * weights[250 - i];
    }
    return color;
}

void main(void) 
{
    float x = (vUV.x - scalingRange.x) / (scalingRange.y - scalingRange.x);
    float y = (vUV.y - scalingRange.x) / (scalingRange.y - scalingRange.x);
    vec2 scaledUV = vec2(x, y);

    if((vUV.x > rangeFilter.x && vUV.x < rangeFilter.y) && (vUV.y > rangeFilter.x && vUV.y < rangeFilter.y)){
        gl_FragColor = blur13(scaledUV, textureResolution, blurDirection);
    }
    else{
        gl_FragColor = blur100(scaledUV, textureResolution, blurDirection);
    }
}
